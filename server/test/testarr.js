
const arrmem = [
    0xc4,  0x80,  0x83,  0x00,   0x03,  0x00,  0x05,  0x00,   
    0x03,  0x00,  0x04,  0x00,   0x00,  0x00,  0x01,  0x00, 
    0x02,  0x00,  0x03,  0x00,   0x10,  0x00,  0x11,  0x00,   
    0x12,  0x00,  0x13,  0x00,   0x20,  0x00,  0x21,  0x00, 
    0x22,  0x00,  0x23,  0x01,   0x00,  0x01,  0x01,  0x01,   
    0x02,  0x01,  0x03,  0x01,   0x10,  0x01,  0x11,  0x01, 
    0x12,  0x01,  0x13,  0x01,   0x20,  0x01,  0x21,  0x01,   
    0x22,  0x01,  0x23,  0x02,   0x00,  0x02,  0x01,  0x02, 
    0x02,  0x02,  0x03,  0x02,   0x10,  0x02,  0x11,  0x02,   
    0x12,  0x02,  0x13,  0x02,   0x20,  0x02,  0x21,  0x02, 
    0x22,  0x02,  0x23,  0x03,   0x00,  0x03,  0x01,  0x03,   
    0x02,  0x03,  0x03,  0x03,   0x10,  0x03,  0x11,  0x03, 
    0x12,  0x03,  0x13,  0x03,   0x20,  0x03,  0x21,  0x03,   
    0x22,  0x03,  0x23,  0x04,   0x00,  0x04,  0x01,  0x04, 
    0x02,  0x04,  0x03,  0x04,   0x10,  0x04,  0x11,  0x04,   
    0x12,  0x04,  0x13,  0x04,   0x20,  0x04,  0x21,  0x04, 
    0x22,  0x04,  0x23
]

function initArray(sizes, mem, vsize) {
    let v = new Array(sizes[0])
    const s = sizes.length > 1 ? sizes.slice(1) : []
    const sb = s.length > 0 ? s.reduce((a, v) => a * v, 1) * vsize : 0
    for (let i = 0; i < sizes[0]; i++) {
        if (sizes.length === 1) {
            v[i] = (mem[i*vsize] * 256 + mem[i*vsize+1]).toString(16)
        } else {
            const so = sb * i
            v[i] = initArray(sizes.slice(1), mem.slice(so, so+sb), vsize)
        }
    }
    return v
}

function arrvals(mem) {
    const offset = mem[2] + mem[3] * 256
    if (offset !== mem.length) { console.log('bad length'); return }
    const dim = mem[4]
    let sizes = []
    for (let d = 0; d < dim; d++) {
        const si = 5 + 2*d
        sizes.push(mem[si] * 256 + mem[si+1])
    }
    // NOTE: this is for integers, so 2 bytes per value
    let values = initArray(sizes, mem.slice(5 + 2*dim), 2)
    return values
}

const v = arrvals(arrmem)
console.dir(v)
